fix(College)
rownames(college)
rownames(College)
college = college[,-1]
fix(college)
rm(college)
rm(College)
library(ISLR)
College
fix(College)
college <- College
college
fix(College)
College[,1]
summary(college)
pairs(college[,1;10])
pairs(colege[,1:10])
pairs(colgege[,1:10])
pairs(college[,1:10])
college[,c("Outstage","Private")]
college[c("Outstage","Private"),]
college[,c("Outstate","Private")]
boxplot(college[,c("Outstate","Private")])
boxplot(subset(college[,"Outstate"],Private="Yes")
)
boxplot(subset(college[,c("Outstate","Private")],Private="Yes")
)
boxplot(subset(college[,c("Outstate","Private")],Private="Yes"))
subset(college,Private="Yes")
subset(college,Private="Yes")[,"Outstate"]
boxplot(subset(college,Private="Yes")[,"Outstate"])
?boxplot
boxplot(Outstate ~ Private, data = college)
Elite = rep("No",nrow(college))
Elite[college$Top10perc>50]="Yes"
Elite = as.factor(Elite)
college = data.frame(college,Elite)
summary(college$Elite)
boxplot(Outstate ~ Elite, data = college)
boxplot(Outstate ~ Private, data = college)
par(mfrow=c(2,2))
hist(college$S.F.Ratio)
hist(college$Grad.Rate)
hist(college$Expend)
hist(college$perc.alumni)
perc.accept = college$Accept / college$Apps
perc.accept
college$perc.accept = perc.accept
par(mfrow=c(1,1))
?plot
lm(Grad.Rate ~ perc.accept,data=college)
mod <- lm(Grad.Rate ~ perc.accept,data=college)
summary(mod)
plot(Grad.Rate ~ perc.accept, data = college)
lines(lm(Grad.Rate ~ perc.accept,data=college))
fit <- lm(Grad.Rate ~ perc.accept,data=college)
fit
coef(fit)
coef(fit)[1]
coef(fit)
lowess(model)
lines(coef(fit))
abline(model)
abline(fit)
plot(Grad.Rate ~ perc.accept, data = college)
abline(lm(Grad.Rate ~ perc.accept, data = college))
identify(Grad.Rate,perc.accept,rownames(college))
identify(college$Grad.Rate,college$perc.accept,rownames(college))
rownames(colleg)
rownames(college)
subset(college,perc.accept>1)
subset(college,grad.rate>100)
subset(college,Grad.Rate>100)
college([subset(college,Grad.Rate>100],)
college[subset(college,Grad.Rate>100],]
college[subset(college,Grad.Rate>100]),]
subset(college,Grad.Rate>100])
subset(college,Grad.Rate>100)
college[subset(college,Grad.Rate>100),]
subset(college,Grad.Rate<=100)
college <- subset(college,Grad.Rate<=100)
plot(Grad.Rate ~ perc.accept, data = college)
abline(lm(Grad.Rate ~ perc.accept, data = college))
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
mod1 <- train(y ~ ., data=vowel.train,method="rf")
mod2 <- train(y ~ ., data=vowel.train,method="gbm",verbose=FALSE)
pred1 <- predict(mod1,vowel.test)
pred2 <- predict(mod2,vowel.test)
predDF <- data.frame(pred1,pred2,y=vowel.test$y)
combModFit <- train(y ~.,method="gam",data=predDF)
combPred <- predict(combModFit,predDF)
agreeOnly <- combDF[combDF$agree,]
combDF <- data.frame(pred1,pred2,agree = pred1==pred2,y=vowel.test$y)
library(caret)
mod1 <- train(y ~ ., data=vowel.train,method="rf")
mod1 <- train(y ~ ., data=vowel.train,method="rf")
mod2 <- train(y ~ ., data=vowel.train,method="gbm",verbose=FALSE)
install.packages("e1071")
library(e1071)
mod1 <- train(y ~ ., data=vowel.train,method="rf")
mod2 <- train(y ~ ., data=vowel.train,method="gbm",verbose=FALSE)
pred1 <- predict(mod1,vowel.test)
pred2 <- predict(mod2,vowel.test)
predDF <- data.frame(pred1,pred2,y=vowel.test$y)
combModFit <- train(y ~.,method="gam",data=predDF)
combPred <- predict(combModFit,predDF)
agreeOnly <- combDF[combDF$agree,]
combDF <- data.frame(pred1,pred2,agree = pred1==pred2,y=vowel.test$y)
confusionMatrix(pred1,vowel.test$y)$overall[1]
confusionMatrix(pred2,vowel.test$y)$overall[1]
confusionMatrix(agreeOnly$pred1,agreeOnly$y)$overall[1]
predDF <- data.frame(pred1,pred2,y=vowel.test$y)
combModFit <- train(y ~.,method="gam",data=predDF)
combPred <- predict(combModFit,predDF)
combDF <- data.frame(pred1,pred2,agree = pred1==pred2,y=vowel.test$y)
agreeOnly <- combDF[combDF$agree,]
confusionMatrix(pred1,vowel.test$y)$overall[1]
confusionMatrix(pred2,vowel.test$y)$overall[1]
confusionMatrix(agreeOnly$pred1,agreeOnly$y)$overall[1]
set.seed(33833)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
mod1 <- train(y ~ ., data=vowel.train,method="rf")
mod2 <- train(y ~ ., data=vowel.train,method="gbm",verbose=FALSE)
pred1 <- predict(mod1,vowel.test)
pred2 <- predict(mod2,vowel.test)
predDF <- data.frame(pred1,pred2,y=vowel.test$y)
#combModFit <- train(y ~.,method="gam",data=predDF)
#combPred <- predict(combModFit,predDF)
combDF <- data.frame(pred1,pred2,agree = pred1==pred2,y=vowel.test$y)
agreeOnly <- combDF[combDF$agree,]
confusionMatrix(pred1,vowel.test$y)$overall[1]
confusionMatrix(pred2,vowel.test$y)$overall[1]
confusionMatrix(agreeOnly$pred1,agreeOnly$y)$overall[1]
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
install.packages("AppliedPredictiveModeling")
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
mod1 <- train(diagnosis ~ ., data=training,method="rf")
mod2 <- train(diagnosis ~ ., data=training,method="gbm",verbose=FALSE)
mod3 <- train(diagnosis ~ ., data=training,method="lda")
predtrain1 <- predict(mod1,training)
predtrain2 <- predict(mod2,training)
predtrain3 <- predict(mod3,training)
combDF <- data.frame(predtrain1,predtrain2,predtrain3,diagnosis = training$diagnosis)
modComb <- train(diagnosis ~ ., data=combDF, method="rf")
predtest1 <- predict(mod1,testing)
predtest2 <- predict(mod2,testing)
predtest3 <- predict(mod3,testing)
combtestDF <- data.frame(predtest1,predtest2,predtest3,diagnosis = testing$diagnosis)
predtestComb <- predict(modComb,combtestDF)
combDF <- data.frame(pred1 = predtrain1,pred2 = predtrain2,pred3 = predtrain3,diagnosis = training$diagnosis)
modComb <- train(diagnosis ~ ., data=combDF, method="rf")
predtest1 <- predict(mod1,testing)
predtest2 <- predict(mod2,testing)
predtest3 <- predict(mod3,testing)
combtestDF <- data.frame(pred1 = predtest1,pred2 = predtest2,pred3 = predtest3,diagnosis = testing$diagnosis)
predtestComb <- predict(modComb,combtestDF)
confusionMatrix(predtest1,testing$diagnosis)$overall[1]
confusionMatrix(predtest2,testing$diagnosis)$overall[1]
confusionMatrix(predtest3,testing$diagnosis)$overall[1]
confusionMatrix(predtestComb,testing$diagnosis)$overall[1]
mod1 <- train(diagnosis ~ ., data=training,method="rf")
set.seed(62433)
mod1 <- train(diagnosis ~ ., data=training,method="rf")
mod2 <- train(diagnosis ~ ., data=training,method="gbm",verbose=FALSE)
mod3 <- train(diagnosis ~ ., data=training,method="lda")
predtrain1 <- predict(mod1,training)
predtrain2 <- predict(mod2,training)
predtrain3 <- predict(mod3,training)
combDF <- data.frame(pred1 = predtrain1,pred2 = predtrain2,pred3 = predtrain3,diagnosis = training$diagnosis)
modComb <- train(diagnosis ~ ., data=combDF, method="rf")
predtest1 <- predict(mod1,testing)
predtest2 <- predict(mod2,testing)
predtest3 <- predict(mod3,testing)
combtestDF <- data.frame(pred1 = predtest1,pred2 = predtest2,pred3 = predtest3,diagnosis = testing$diagnosis)
predtestComb <- predict(modComb,combtestDF)
confusionMatrix(predtest1,testing$diagnosis)$overall[1]
confusionMatrix(predtest2,testing$diagnosis)$overall[1]
confusionMatrix(predtest3,testing$diagnosis)$overall[1]
confusionMatrix(predtestComb,testing$diagnosis)$overall[1]
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
str(concrete)
?train
names(getModelInfo())
set.seed(233)
model <- train(CompressiveStrength ~., data = training, model = "lasso")
?plot.enet
install.packages("elasticnet")
library(elasticnet)
plot.enet(model)
?plot.enet
plot(model)
varImp(model)
model
model$finalModel
summary(model$finalModel()
summary(model$finalModel)
names(model$finalModel)
model$finalModel$localImportance
localImportance(model$finalModel)
model$finalModel$importanceSD
model$finalModel$type
model$finalModel$coefs
model$finalModel$xNames
set.seed(3523)
library(AppliedPredictiveModeling)
library(caret)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
model <- train(CompressiveStrength ~., method = "lasso", data = training)
plot(model$finalModel)
model$finalModel
names(model$finalModel)
?enet
names(model$finalModel)
model$finalModel$lambda
model
plot(model)
plot(model,xvar="penalty")
plot(model$finalModel,xvar="penalty")
png(file="penalty.png", width=432, height=432, pointsize=12)
plot(model$finalModel,xvar="penalty")
dev.off()
getwd()
?plot.enet
plot(model$finalModel,xvar="penalty",use.color=TRUE)
?plot.enet
?plot
plot(model$finalModel,xvar="penalty",use.color=TRUE)
leged()
legend()
legend(legend=model$finalModel)
legend(x=0,y=0,legend=model$finalModel)
model$finalModel
names(model$finalModel)
model$finalModel$penalty
round(model$finalModel$penalty,3)
model$finalModel$allset
model$finalModel$beta.pure
betas <- as.data.frame(model$finalModel$beta.pure)
betas$penalty <- model$finalModel$penalty
betas
library(ggplot2)
plot(betas$CoarseAggregate,betas$penalty)
lines(betas$CoarseAggregate,betas$penalty)
lines(betas$penalty,betas$CoarseAggregate)
plot()
dev.off()
lines(betas$penalty,betas$CoarseAggregate)
lines(betas$CoarseAggregate,betas$penalty)
plot(betas$penalty,betas$CoarseAggregate)
lines(betas$penalty,betas$CoarseAggregate)
betas <- as.data.frame(model$finalModel$beta.pure)
betas$penalty <- model$finalModel$penalty
betas
betas <- as.data.frame(model$finalModel$beta.pure)
betas$penalty <- round(model$finalModel$penalty,3)
View(betas)
model
library(ISLR)
data(Auto)
str(Auto)
summary(Auto)
?auto
auto <- Auto
auto$cylinders <- as.factor(auto$cylinders)
auto$year <- as.factor(auto$year)
auto$origin <- as.factor(auto$origin)
apply(auto,1,range)
apply(auto,1,range)
apply(auto,2,range)
apply(auto,2,class)
apply(auto,1,class)
apply(auto,1,class)
apply(auto,2,class)
sapply(auto,2,class)
sapply(auto,class)
sapply(auto,range)
sapply(auto,class)=="numeric"
auto[sapply(auto,class)=="numeric"]
sapply(auto[sapply(auto,class)=="numeric"],range)
summary(auto)
sapply(auto[sapply(auto,class)=="numeric"],mean)
sapply(auto[sapply(auto,class)=="numeric"],sd)
auto[-c(10:85),]
auto[-c(10:84),]
auto[-c(10:10),]
auto[c(10:85),]
auto[c(10:10),]
auto[c(10:12),]
auto[c(10:85),]
auto[c(10:84),]
auto[c(10:85),]
dim(auto[c(10:85),])
?pnrom
?pnorm
x <- rnorm(100,1)
x
x <- rnorm(100)
y <- rnorm(100) + 0.05*x
cor(x,y)
cov(x,y)
x - mean(x)
(x - mean(x))*(y-mean(y))
mean((x - mean(x))*(y-mean(y)))
library(sas7bdat)
?sas7bdat
read.sas7bdat("\\grh200\Decision Support\Resources\BI Tool\Was Corportate_HBI\HSMR\HSMR SAS\PATTY\hsmr_allcases_coeff.sas7bdat")
read.sas7bdat("//grh200/Decision Support/Resources/BI Tool/Was Corportate_HBI/HSMR/HSMR SAS/PATTY/hsmr_allcases_coeff.sas7bdat")
d <- read.sas7bdat("//grh200/Decision Support/Resources/BI Tool/Was Corportate_HBI/HSMR/HSMR SAS/PATTY/hsmr_allcases_coeff.sas7bdat")
d
str(d)
View(d)
class(d)
d$Intercept
d$diag_flagA04
log(3.235)
exp(1.05)
exp(1.01)
exp(.01)
d
d$diag_flagN18
a = 10
animal = 1
calendar_year = 2015
calendar_year*0.0154
29.5640 - calendar_year*0.0154
exp(29.5640 - calendar_year*0.0154)
o = exp(29.5640 - calendar_year*0.0154)
p = o/(o+1)
p
2/(2+1)
(.6666+1)/.6666
(1-.6666)/.6666
(.6666)/(1-.6666)
setwd("../killed_by_police/code/rawcode")
library(data.table)
library(ggplot2)
library(ggvis)
setwd("../killed_by_police/code/rawcode")
thecounted_and_crime = fread("../../data/thecounted_and_crime.csv",showProgress=FALSE)
thecounted_and_crime_labels = fread("../../data/killed_by_police_code_book.csv",showProgress=FALSE)
plot_labels = setNames(thecounted_and_crime_labels$variable,thecounted_and_crime_labels$label)
thecounted_and_crime
thecounted_and_crime %>%
ggvis(x = input_select(label="Choose x-variable:",
choices = c("Violent Crime per 100k Population" = "violent_crime2014_per100k",
"Murder & Non Negligent Manslaughter per 100k Population" = "murder_nonnegligent_manslaughter2014_per100k"),
map=as.name),
y=~killedbypolice2015_per100k,opacity:=.5) %>%
layer_points(fill:="darkred") %>%
layer_text(text:=~state,opacity:=1) %>%
add_axis("x",title="x title")
thecounted_and_crime %>%
ggvis(x = input_select(label="Choose x-variable:",
choices = c("Violent Crime per 100k Population" = "violent_crime2014_per100k",
"Murder & Non Negligent Manslaughter per 100k Population" = "murder_nonnegligent_manslaughter2014_per100k"),
id = "selectedx",
map=as.name),
y=~killedbypolice2015_per100k,opacity:=.5) %>%
layer_points(fill:="darkred") %>%
layer_text(text:=~state,opacity:=1) %>%
add_axis("x",title=selectedx$selected)
sel <- input_select(names(mtcars),map=as.name)
sel
xvalue = input_select(label="Choose x-variable:",
choices = c("Violent Crime per 100k Population" = "violent_crime2014_per100k",
"Murder & Non Negligent Manslaughter per 100k Population" = "murder_nonnegligent_manslaughter2014_per100k"),
id = "selectedx",
map=as.name)
thecounted_and_crime %>%
ggvis(x = xvalue,
y=~killedbypolice2015_per100k,opacity:=.5) %>%
layer_points(fill:="darkred") %>%
layer_text(text:=~state,opacity:=1) %>%
add_axis("x",title=selectedx$selected) %>%
layer_model_predictions(model = input_radiobuttons(label = "Choose model for fitted line:", choices = c("loess","lm")), se = TRUE)
xvalue = input_select(label="Choose x-variable:",
choices = c("Violent Crime per 100k Population" = "violent_crime2014_per100k",
"Murder & Non Negligent Manslaughter per 100k Population" = "murder_nonnegligent_manslaughter2014_per100k"),
id = "selectedx",
map=as.name)
thecounted_and_crime %>%
ggvis(x = xvalue,
y=~killedbypolice2015_per100k,opacity:=.5) %>%
layer_points(fill:="darkred") %>%
layer_text(text:=~state,opacity:=1) %>%
add_axis("x",title="blah") %>%
layer_model_predictions(model = input_radiobuttons(label = "Choose model for fitted line:", choices = c("loess","lm")), se = TRUE)
xvalue = input_select(label="Choose x-variable:",
choices = c("Violent Crime per 100k Population" = "violent_crime2014_per100k",
"Murder & Non Negligent Manslaughter per 100k Population" = "murder_nonnegligent_manslaughter2014_per100k"),
id = "selectedx",
map=as.name)
thecounted_and_crime %>%
ggvis(x = xvalue,
y=~killedbypolice2015_per100k,opacity:=.5) %>%
layer_points(fill:="darkred") %>%
layer_text(text:=~state,opacity:=1) %>%
add_axis("x",title="blah")
xvalue = input_select(label="Choose x-variable:",
choices = c("Violent Crime per 100k Population" = "violent_crime2014_per100k",
"Murder & Non Negligent Manslaughter per 100k Population" = "murder_nonnegligent_manslaughter2014_per100k"),
id = "selectedx",
map=as.name)
thecounted_and_crime %>%
ggvis(x = xvalue,
y=~killedbypolice2015_per100k,opacity:=.5) %>%
layer_points(fill:="darkred") %>%
layer_text(text:=~state,opacity:=1) %>%
add_axis("x",title=xvalue) %>%
layer_model_predictions(model = input_radiobuttons(label = "Choose model for fitted line:", choices = c("loess","lm")), se = TRUE)
xvalue = input_select(label="Choose x-variable:",
choices = c("Violent Crime per 100k Population" = "violent_crime2014_per100k",
"Murder & Non Negligent Manslaughter per 100k Population" = "murder_nonnegligent_manslaughter2014_per100k"),
id = "selectedx",
map=as.name)
thecounted_and_crime %>%
ggvis(x = xvalue,
y=~killedbypolice2015_per100k,opacity:=.5) %>%
layer_points(fill:="darkred") %>%
layer_text(text:=~state,opacity:=1) %>%
add_axis("x",title=xvalue()) %>%
layer_model_predictions(model = input_radiobuttons(label = "Choose model for fitted line:", choices = c("loess","lm")), se = TRUE)
thecounted_and_crime %>%
ggvis(x = xvalue,
y=~killedbypolice2015_per100k,opacity:=.5) %>%
layer_points(fill:="darkred") %>%
layer_text(text:=~state,opacity:=1) %>%
add_axis("x",title=xvalue)
xvalue = input_select(label="Choose x-variable:",
choices = c("Violent Crime per 100k Population" = "violent_crime2014_per100k",
"Murder & Non Negligent Manslaughter per 100k Population" = "murder_nonnegligent_manslaughter2014_per100k"),
id = "selectedx",
map=as.name)
thecounted_and_crime %>%
ggvis(x = xvalue,
y=~killedbypolice2015_per100k,opacity:=.5) %>%
layer_points(fill:="darkred") %>%
layer_text(text:=~state,opacity:=1) %>%
add_axis("x",title=xvalue[1])
xvalue
xvalue$x
xvalue$vals
xvalue = input_select(label="Choose x-variable:",
choices = c("Violent Crime per 100k Population" = "violent_crime2014_per100k",
"Murder & Non Negligent Manslaughter per 100k Population" = "murder_nonnegligent_manslaughter2014_per100k"),
id = "selectedx",
map=as.name)
thecounted_and_crime %>%
ggvis(x = xvalue,
y=~killedbypolice2015_per100k,opacity:=.5) %>%
layer_points(fill:="darkred") %>%
layer_text(text:=~state,opacity:=1) %>%
add_axis("x",title=xvalue$vals) %>%
layer_model_predictions(model = input_radiobuttons(label = "Choose model for fitted line:", choices = c("loess","lm")), se = TRUE)
xvalue = input_select(label="Choose x-variable:",
choices = c("Violent Crime per 100k Population" = "violent_crime2014_per100k",
"Murder & Non Negligent Manslaughter per 100k Population" = "murder_nonnegligent_manslaughter2014_per100k"),
id = "selectedx",
map=as.name)
thecounted_and_crime %>%
ggvis(x = xvalue,
y=~killedbypolice2015_per100k,opacity:=.5) %>%
layer_points(fill:="darkred") %>%
layer_text(text:=~state,opacity:=1) %>%
add_axis("x",title="Selected X Variable") %>%
layer_model_predictions(model = input_radiobuttons(label = "Choose model for fitted line:", choices = c("loess","lm")), se = TRUE, formula = selectedx ~ killedbypolice2015_per100k)
xvalue = input_select(label="Choose x-variable:",
choices = c("Violent Crime per 100k Population" = "violent_crime2014_per100k",
"Murder & Non Negligent Manslaughter per 100k Population" = "murder_nonnegligent_manslaughter2014_per100k"),
id = "selectedx",
map=as.name)
thecounted_and_crime %>%
ggvis(x = xvalue,
y=~killedbypolice2015_per100k,opacity:=.5) %>%
layer_points(fill:="darkred") %>%
layer_text(text:=~state,opacity:=1) %>%
add_axis("x",title="Selected X Variable") %>%
layer_model_predictions(model = input_radiobuttons(label = "Choose model for fitted line:", choices = c("loess","lm")), se = TRUE, formula = xvalue ~ killedbypolice2015_per100k)
